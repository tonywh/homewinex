# Generated by Django 3.0.7 on 2020-08-13 15:04

from django.db import migrations
from ..bbcdata import readFloat40, readRecord

old_default_qty = 0.2

default_qty = [
    ('Elderflowers', 0.05),
    ('Glycerol', 0.001),
    ('Grape tannin powder', 0.001),
    ('Lemon juice', 0.03),
    ('Lime juice', 0.06),
    ('Potassium Bicarbonate', 0.001),
    ('Sugar for sweetening', 0.05),
    ('Tartaric acid', 0.001),
]

liquid = [
    ('Elderflowers', 1000.0, 0.0),
    ('Sugar', 500.0, 650.0),
    ('Sugar for sweetening', 500.0, 650.0),
]

def ingredients_update(apps, schema_editor):
    # Get the historical version of the model
    Ingredient = apps.get_model('recipe', 'Ingredient')

    # Import the solid field value from the import data
    f = open('./imports/ingredients.dat', 'rb')
    data = bytes(f.read())
    i = 0
    value,i = readFloat40(data, i)      # Don't know what first number is
    while i + 5 < len(data):            # Ignore the last 5-byte number also
        record,i = readRecord(data, i)
        ingredient = Ingredient.objects.get(name=record['Fruit'],variety=record['Variety'])
        if ingredient:
            ingredient.is_solid = record['Solid'] == 'yes'
            ingredient.save()
    
    # Update default qty
    for name, qty in default_qty:
        ingredient = Ingredient.objects.get(name=name)
        if ingredient:
            ingredient.default_qty_kg_per_l = qty
            ingredient.save()
    
    # Update liquid content
    for name, old, new in liquid:
        ingredient = Ingredient.objects.get(name=name)
        if ingredient:
            ingredient.liquid = new
            ingredient.save()

def ingredients_update_revert(apps, schema_editor):
    # Get the historical version of the model
    Ingredient = apps.get_model('recipe', 'Ingredient')

    # Ignore change in solid field value as it will be removed when the
    # next migration is reverted.
    
    # Revert default qty
    for name, qty in default_qty:
        ingredient = Ingredient.objects.get(name=name)
        if ingredient:
            ingredient.default_qty_kg_per_l = old_default_qty
            ingredient.save()

    # Revert liquid content
    for name, old, new in liquid:
        ingredient = Ingredient.objects.get(name=name)
        if ingredient:
            ingredient.liquid = old
            ingredient.save()

class Migration(migrations.Migration):

    dependencies = [
        ('recipe', '0017_ingredient_is_solid'),
    ]

    operations = [
        migrations.RunPython(ingredients_update, ingredients_update_revert)
    ]
